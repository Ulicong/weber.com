{
  "name": "李欢的个人空间",
  "tagline": "LiHuan's Personal Space",
  "body": "### 先来个自我评价吧.\r\n我是一个喜欢开源、喜欢刨根问底的coder；我的座右铭是“要用CPU的思维来编程,做一个有思想的攻城师！”。\r\n\r\n--\r\n### Java锁\r\n#### 总结\r\n1. synchronized同步锁是作用在对象上面对象必需统一不能变；\r\n2. 线程同步互斥指的是多个线程执行同一段代码或执行多段代码而不被打断；\r\n3. 注意synchronized作用于XX.class子节码时的同步互斥情况；\r\n4. synchronized同步块可以作用于String变量上但不能作用于char、int、double等java基本类型上因为它们定义时不会生成对象；\r\n5. Lock实现同步互斥时必需共用同一个ReentrantLock对象；注意添加finally释放锁;\r\n6. Synchronized的语义底层是通过一个monitor的对象来完成，其实wait/notify等方法也依赖于monitor对象，这就是为什么只有在同步的块或者方法中才能调用wait/notify等方法，否则会抛出      java.lang.IllegalMonitorStateException的异常的原因。\r\n\r\n#### synchronized原理\r\n每个对象有一个监视器锁（monitor）。当monitor被占用时就会处于锁定状态，线程执行monitorenter指令时尝试获取monitor的所有权，过程如下：\r\n1. 如果monitor的进入数为0，则该线程进入monitor，然后将进入数设置为1，该线程即为monitor的所有者。\r\n2. 如果线程已经占有该monitor，只是重新进入，则进入monitor的进入数加1.\r\n3. 如果其他线程已经占用了monitor，则该线程进入阻塞状态，直到monitor的进入数为0，再重新尝试获取monitor的所有权。\r\n4. 执行monitorexit的线程必须是objectref所对应的monitor的所有者。\r\n5. 指令执行时，monitor的进入数减1，如果减1后进入数为0，那线程退出monitor，不再是这个monitor的所有者。其他被这个monitor阻塞的线程可以尝试去获取这个 monitor 的所有权。\r\n\r\n#### Lock\r\nLock比传统线程模型中的synchronized方式更加面向对象，与生活中的锁类似，锁本身也应该是一个对象。两个线程执行的代码片段要实现同步互斥的效果，它们必须用同一个Lock对象。\r\n\r\n####  读写锁\r\n读写锁：分为读锁和写锁，多个读锁不互斥，读锁与写锁互斥，这是由jvm自己控制的，你只要上好相应的锁即可。如果你的代码只读数据，可以很多人同时读，但不能同时写，那就上读锁；如果你的代码修改数据，只能有一个人在写，且不能同时读取，那就上写锁。总之，读的时候上读锁，写的时候上写锁！\r\n```\r\n/**\r\n\t * 读写锁 启动6个线程分别对data变量进行读写操作\r\n\t */\r\n\tpublic static void main(String[] args) {\r\n\t\tfinal Quen3 quen3 = new Quen3();\r\n\t\tfor (int i = 0; i < 3; i++) {\r\n\r\n\t\t\tnew Thread(new Runnable() {\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tquen3.get();\r\n\t\t\t\t}\r\n\t\t\t}).start();\r\n\r\n\t\t\tnew Thread(new Runnable() {\r\n\r\n\t\t\t\t@Override\r\n\t\t\t\tpublic void run() {\r\n\t\t\t\t\tquen3.set(new Random().nextInt(10000));\r\n\t\t\t\t}\r\n\t\t\t}).start();\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Quen3 {\r\n\tprivate int data;\r\n\tReentrantReadWriteLock rwl = new ReentrantReadWriteLock();//加上读写锁\r\n\r\n\tpublic void get() {\r\n\t\trwl.readLock().lock();\r\n\t\ttry {\r\n\t\t\tSystem.out.println(Thread.currentThread().getName()\r\n\t\t\t\t\t+ \" is Ready to read data!\");\r\n\t\t\tThread.sleep(1000);\r\n\t\t\tSystem.out.println(Thread.currentThread().getName()\r\n\t\t\t\t\t+ \" have read data \" + data);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\t\t\trwl.readLock().unlock();//注意关闭锁\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void set(int data) {\r\n\t\trwl.writeLock().lock();\r\n\t\ttry {\r\n\t\t\tthis.data = data;\r\n\t\t\tSystem.out.println(Thread.currentThread().getName()\r\n\t\t\t\t\t+ \" is Ready to set data!\");\r\n\t\t\tThread.sleep(1000);\r\n\t\t\tSystem.out.println(Thread.currentThread().getName() + \" have set \"\r\n\t\t\t\t\t+ data);\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t} finally {\r\n\t\t\trwl.writeLock().unlock();\r\n\t\t}\r\n\t}\r\n\r\n```\r\n\r\n### 多线程间通信\r\n#### 总结\r\n1. 由于cpu在执行java进程是无序的；如果两个线程要实现交互则必需时行干预。wait与notify必需作用于同步块中即锁对象下。而Condition也是作用于同一个Lock对象下。\r\n2. jdk1.5之前线程间通信通过wait/notify和一个标识变量进行判断；进而实现通信。\r\n3. wait与notify原理查看Java锁\r\n4. 调用某个对象的wait()方法，相当于让当前线程交出此对象的monitor（即释放对象锁），然后进入等待状态，等待后续再次获得此对象的锁（Thread类中的sleep方法使当前线程暂停执行一段时间，从而让其他线程有机会继续执行，但它并不释放对象锁。）\r\n5. notify()方法能够唤醒一个正在等待该对象的monitor的线程，当有多个线程都在等待该对象的monitor的话，则只能唤醒其中一个线程，具体唤醒哪个线程则不得而知。\r\n6. notify()和notifyAll()方法只是唤醒等待该对象的monitor的线程，并不决定哪个线程能够获取到monitor。\r\n\r\n#### wait与notify实现线程间的通信\r\n在jdk1.5之前线程间通信依赖于wait与notify；如下常景分析：子线程循环10次、接着主线程循环100次、接着又回到子线程循环10次、主线程循环100次、并且两个线程要互斥输出如此循环50次\r\n```\r\npublic class TraditionalThreadCommunication {\r\n    /**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        final Business business = new Business();\r\n        // 子线程\r\n        new Thread(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n                for (int i = 1; i <= 50; i++) {\r\n                    business.sub(i);\r\n                }\r\n            }\r\n        }).start();\r\n        // 主线程\r\n        for (int i = 1; i <= 50; i++) {\r\n            business.main(i);\r\n        }\r\n    }\r\n}\r\nclass Business {\r\n    private boolean bShouldSub = true;// 用于标示\r\n    public synchronized void sub(int i) {\r\n        while (!bShouldSub) {// 如果不 该子线程执行则挂起\r\n            try {\r\n                this.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        for (int j = 1; j <= 10; j++) {\r\n            System.out.println(\"sub thread sequnce of \" + j + \" loop of \" + i);\r\n        }\r\n        bShouldSub = false;\r\n        this.notify();\r\n    }\r\n    /**\r\n     * 1、当程序第一次执行时进入主线程执行；此时判断是否该自己执行、然后进入睡眠状态、接着子线程执行。\r\n     * \r\n     * @param i\r\n     */\r\n    public synchronized void main(int i) {\r\n        while (bShouldSub) {// 这里可以用if、但用while更好原因：当主线程被唤醒时在一次判读标识这样更安全健壮\r\n            try {\r\n                this.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        for (int j = 1; j <= 100; j++) {\r\n            System.out.println(\"man thread sequnce of \" + j + \" loop of \" + i);\r\n        }\r\n        bShouldSub = true;\r\n        this.notify();\r\n    }\r\n}  \r\n\r\n```\r\n\r\n#### Callable&Future通信\r\n1.Callable和Future可以取得线程执行后的结果；来实现多个线程间的通信。\r\n2.Future取得的结果类型和Callable返回的结果类型必须一致，这是通过泛型来实现的。\r\n3.Callable要采用ExecutorSevice的submit方法提交，返回的future对象可以取消任务。\r\n4.CompletionService用于提交一组Callable任务，其take方法返回已完成的一个Callable任务对应的Future对象。\r\n5.好比我同时种了几块地的麦子，然后就等待收割。收割时，则是那块先成熟了，则先去收割哪块麦子。\r\n```\r\n/**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        ExecutorService threadPool =  Executors.newSingleThreadExecutor();\r\n        Future<String> future =\r\n            threadPool.submit(//提交单个Callable\r\n                new Callable<String>() {\r\n                    public String call() throws Exception {\r\n                        Thread.sleep(2000);\r\n                        return \"hello\";\r\n                    };\r\n                }\r\n        );\r\n        System.out.println(\"等待结果\");\r\n        try {\r\n            System.out.println(\"拿到结果：\" + future.get());\r\n        } catch (InterruptedException e) {\r\n            // TODO Auto-generated catch block\r\n            e.printStackTrace();\r\n        } catch (Exception e) {\r\n            // TODO Auto-generated catch block\r\n            e.printStackTrace();\r\n        }\r\n        \r\n        ExecutorService threadPool2 =  Executors.newFixedThreadPool(10);\r\n        CompletionService<Integer> completionService = new ExecutorCompletionService<Integer>(threadPool2);\r\n        for(int i=1;i<=10;i++){\r\n            final int seq = i;\r\n            completionService.submit(new Callable<Integer>() {//提交一组Callable\r\n                @Override\r\n                public Integer call() throws Exception {\r\n                    Thread.sleep(new Random().nextInt(5000));\r\n                    return seq;\r\n                }\r\n            });\r\n        }\r\n        for(int i=0;i<10;i++){\r\n            try {\r\n                System.out.println(\r\n                        completionService.take().get());\r\n            } catch (InterruptedException e) {\r\n                // TODO Auto-generated catch block\r\n                e.printStackTrace();\r\n            } catch (ExecutionException e) {\r\n                // TODO Auto-generated catch block\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }  \r\n\r\n```\r\n\r\n#### Lock与Condition实现线程间通信\r\nCondition 将 Object 监视器方法（wait、notify 和 notifyAll）分解成截然不同的对象，以便通过将这些对象与任意 Lock 实现组合使用，为每个对象提供多个等待 set（wait-set）。其中，Lock 替代了 synchronized 方法和语句的使用，Condition 替代了 Object 监视器方法的使用；条件（也称为条件队列 或条件变量）为线程提供了一个含义，以便在某个状态条件现在可能为 true 的另一个线程通知它之前，一直挂起该线程（即让其“等待”）。因为访问此共享状态信息发生在不同的线程中，所以它必须受保护，因此要将某种形式的锁与该条件相关联。等待提供一个条件的主要属性是：以原子方式 释放相关的锁，并挂起当前线程，就像 Object.wait 做的那样；Condition 实例实质上被绑定到一个锁上；在等待 Condition 时，允许发生“虚假唤醒”，这通常作为对基础平台语义的让步。对于大多数应用程序，这带来的实际影响很小，因为 Condition 应该总是在一个循环中被等待，并测试正被等待的状态声明。某个实现可以随意移除可能的虚假唤醒，但建议应用程序程序员总是假定这些虚假唤醒可能发生，因此总是在一个循环中等待。\r\n```\r\n/**\r\n     * @param args\r\n     */\r\n    public static void main(String[] args) {\r\n        \r\n        final Business business = new Business();\r\n        new Thread(\r\n                new Runnable() {\r\n                    \r\n                    @Override\r\n                    public void run() {\r\n                    \r\n                        for(int i=1;i<=50;i++){\r\n                            business.sub(i);\r\n                        }\r\n                        \r\n                    }\r\n                }\r\n        ).start();\r\n        \r\n        for(int i=1;i<=50;i++){\r\n            business.main(i);\r\n        }\r\n        \r\n    }\r\n    static class Business {\r\n            Lock lock = new ReentrantLock();\r\n            Condition condition = lock.newCondition();\r\n          private boolean bShouldSub = true;\r\n          public  void sub(int i){\r\n              lock.lock();\r\n              try{\r\n                  while(!bShouldSub){\r\n                      try {\r\n                        condition.await(); //这里有可能发生虚假唤醒；故必需放在一个while循环中\r\n                    } catch (Exception e) {\r\n                        // TODO Auto-generated catch block\r\n                        e.printStackTrace();\r\n                    }\r\n                  }\r\n                    for(int j=1;j<=10;j++){\r\n                        System.out.println(\"sub thread sequence of \" + j + \",loop of \" + i);\r\n                    }\r\n                  bShouldSub = false;\r\n                  condition.signal();\r\n              }finally{\r\n                  lock.unlock();\r\n              }\r\n          }\r\n          \r\n          public  void main(int i){\r\n              lock.lock();\r\n              try{\r\n                 while(bShouldSub){\r\n                          try {\r\n                            condition.await();\r\n                        } catch (Exception e) {\r\n                            // TODO Auto-generated catch block\r\n                            e.printStackTrace();\r\n                        }\r\n                      }\r\n                    for(int j=1;j<=100;j++){\r\n                        System.out.println(\"main thread sequence of \" + j + \",loop of \" + i);\r\n                    }\r\n                    bShouldSub = true;\r\n                    condition.signal();\r\n          }finally{\r\n              lock.unlock();\r\n          }\r\n      }\r\n    \r\n    }  \r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}